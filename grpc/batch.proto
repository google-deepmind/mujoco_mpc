// Copyright 2023 DeepMind Technologies Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package batch;

service Batch {
  // Initialize Batch
  rpc Init(InitRequest) returns (InitResponse);
  // Set Batch data
  rpc Data(DataRequest) returns (DataResponse);
  // Batch settings
  rpc Settings(SettingsRequest) returns (SettingsResponse);
  // Batch costs
  rpc Cost(CostRequest) returns (CostResponse);
  // Batch noise (process + sensor)
  rpc Noise(NoiseRequest) returns (NoiseResponse);
  // Batch norms
  rpc Norms(NormRequest) returns (NormResponse);
  // Shift Batch trajectories
  rpc Shift(ShiftRequest) returns (ShiftResponse);
  // Reset Batch
  rpc Reset(ResetRequest) returns (ResetResponse);
  // Optimize Batch
  rpc Optimize(OptimizeRequest) returns (OptimizeResponse);
  // Get Batch status
  rpc Status(StatusRequest) returns (StatusResponse);
  // Get Batch timing 
  rpc Timing(TimingRequest) returns (TimingResponse);
  // Batch prior matrix
  rpc PriorWeights(PriorWeightsRequest) returns (PriorWeightsResponse);
}

message MjModel {
  optional bytes mjb = 1;
  optional string xml = 2;
}

message InitRequest {
  optional MjModel model = 1;
  optional int32 configuration_length = 2;
  optional int32 buffer_length = 3;
}

message InitResponse {}

message Data {
  repeated double configuration = 1 [packed = true];
  repeated double velocity = 2 [packed = true];
  repeated double acceleration = 3 [packed = true];
  repeated double time = 4 [packed = true];
  repeated double ctrl = 5 [packed = true];
  repeated double configuration_previous = 6 [packed = true];
  repeated double sensor_measurement = 7 [packed = true];
  repeated double sensor_prediction = 8 [packed = true];
  repeated int32 sensor_mask = 9 [packed = true];
  repeated double force_measurement = 10 [packed = true];
  repeated double force_prediction = 11 [packed = true];
}

message DataRequest {
  int32 index = 1;
  Data data = 2;
}

message DataResponse {
  Data data = 1;
}

message Settings {
  optional int32 configuration_length = 1;
  optional bool prior_flag = 2;
  optional bool sensor_flag = 3;
  optional bool force_flag = 4;
  optional int32 max_search_iterations = 5;
  optional int32 max_smoother_iterations = 6;
  optional double gradient_tolerance = 7;
  optional bool verbose_iteration = 8;
  optional bool verbose_optimize = 9;
  optional bool verbose_cost = 10;
  optional bool verbose_prior = 11;
  optional bool band_prior = 12;
  optional int32 search_type = 13;
  optional double step_scaling = 14;
  optional double regularization_initial = 15;
  optional double regularization_scaling = 16;
  optional bool band_copy = 17;
  optional bool time_scaling_force = 18;
  optional bool time_scaling_sensor = 19;
  optional double search_direction_tolerance = 20;
  optional double cost_tolerance = 21;
  optional bool assemble_prior_jacobian = 22;
  optional bool assemble_sensor_jacobian = 23;
  optional bool assemble_force_jacobian = 24; 
  optional bool assemble_sensor_norm_hessian = 25; 
  optional bool assemble_force_norm_hessian = 26;
}

message SettingsRequest {
  Settings settings = 1;
}

message SettingsResponse {
  Settings settings = 1;
}

// TODO(etom): we want a breakdown of the cost into the different sensors and
// forces

message Cost {
  double total = 1;
  double prior = 2;
  double sensor = 3;
  double force = 4;
  double initial = 5;
  repeated double gradient = 6 [packed = true];
  repeated double hessian = 7 [packed = true]; 
  repeated double residual_prior = 8 [packed = true];
  repeated double residual_sensor = 9 [packed = true];
  repeated double residual_force = 10 [packed = true];
  repeated double jacobian_prior = 11 [packed = true];
  repeated double jacobian_sensor = 12 [packed = true];
  repeated double jacobian_force = 13 [packed = true];
  repeated double norm_gradient_sensor = 14 [packed = true];
  repeated double norm_gradient_force = 15 [packed = true];
  repeated double prior_matrix = 16 [packed = true];
  repeated double norm_hessian_sensor = 17 [packed = true];
  repeated double norm_hessian_force = 18 [packed = true];
  int32 nvar = 19;
  int32 nsensor = 20;
  int32 nforce = 21;
}

message CostRequest {
  optional bool derivatives = 1;
  optional bool internals = 2;
}

message CostResponse {
  Cost cost = 1;
}

// TODO(etom): all the protos below use a dict of arrays, but they should use an
// array of dicts.

message Noise {
  repeated double process = 1 [packed = true];
  repeated double sensor = 2 [packed = true];
}

message NoiseRequest {
  Noise noise = 1;
}

message NoiseResponse {
  Noise noise = 1;
}

message Norm {
  repeated int32 sensor_type = 1;
  repeated double sensor_parameters = 2 [packed = true];
}

message NormRequest {
  Norm norm = 1;
}

message NormResponse {
  Norm norm = 1;
}

message ShiftRequest {
  int32 shift = 1;
}

message ShiftResponse {
  int32 head = 1;
}

message ResetRequest {}

message ResetResponse {}

message OptimizeRequest {}

message OptimizeResponse {}

message Status {
  int32 search_iterations = 1;
  int32 smoother_iterations = 2;
  double step_size = 3;
  double regularization = 4;
  double gradient_norm = 5;
  double search_direction_norm = 6;
  int32 solve_status = 7;
  double cost_difference = 8;
  double improvement = 9;
  double expected = 10;
  double reduction_ratio = 11;
}

message StatusRequest {}

message StatusResponse {
  Status status = 1;
}

message Timing {
  double timer_total = 1;
  double timer_inverse_dynamics_derivatives = 2;
  double timer_velacc_derivatives = 3;
  double timer_jacobian_prior = 4;
  double timer_jacobian_sensor = 5;
  double timer_jacobian_force = 6;
  double timer_jacobian_total = 7;
  double timer_cost_prior_derivatives = 8;
  double timer_cost_sensor_derivatives = 9;
  double timer_cost_force_derivatives = 10;
  double timer_cost_total_derivatives = 11;
  double timer_cost_gradient = 12;
  double timer_cost_hessian = 13;
  double timer_cost_derivatives = 14;
  double timer_cost = 15;
  double timer_cost_prior = 16;
  double timer_cost_sensor = 17;
  double timer_cost_force = 18;
  double timer_cost_config_to_velacc = 19;
  double timer_cost_prediction = 20;
  double timer_residual_prior = 21;
  double timer_residual_sensor = 22;
  double timer_residual_force = 23;
  double timer_search_direction = 24;
  double timer_search = 25;
  double timer_configuration_update = 26;
  double timer_optimize = 27;
  double timer_prior_weight_update = 28;
  double timer_prior_set_weight = 29;
  double timer_update_trajectory = 30;
  double timer_update = 31;
}

message TimingRequest {}

message TimingResponse {
  Timing timing = 1;
}

message PriorWeightsRequest {
  repeated double weights = 1 [packed = true];
}

message PriorWeightsResponse {
  repeated double weights = 1 [packed = true];
  int32 dimension = 2;
}
